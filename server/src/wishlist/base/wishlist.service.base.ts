/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Wishlist as PrismaWishlist,
  Listing as PrismaListing,
  User as PrismaUser,
} from "@prisma/client";

export class WishlistServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.WishlistCountArgs, "select">): Promise<number> {
    return this.prisma.wishlist.count(args);
  }

  async wishlists<T extends Prisma.WishlistFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.WishlistFindManyArgs>
  ): Promise<PrismaWishlist[]> {
    return this.prisma.wishlist.findMany<Prisma.WishlistFindManyArgs>(args);
  }
  async wishlist<T extends Prisma.WishlistFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.WishlistFindUniqueArgs>
  ): Promise<PrismaWishlist | null> {
    return this.prisma.wishlist.findUnique(args);
  }
  async createWishlist<T extends Prisma.WishlistCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.WishlistCreateArgs>
  ): Promise<PrismaWishlist> {
    return this.prisma.wishlist.create<T>(args);
  }
  async updateWishlist<T extends Prisma.WishlistUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.WishlistUpdateArgs>
  ): Promise<PrismaWishlist> {
    return this.prisma.wishlist.update<T>(args);
  }
  async deleteWishlist<T extends Prisma.WishlistDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.WishlistDeleteArgs>
  ): Promise<PrismaWishlist> {
    return this.prisma.wishlist.delete(args);
  }

  async findListings(
    parentId: string,
    args: Prisma.ListingFindManyArgs
  ): Promise<PrismaListing[]> {
    return this.prisma.wishlist
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .listings(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.wishlist
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
